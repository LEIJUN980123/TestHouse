函数式接口
     有且仅有一个抽象方法，但是可以有多个抽象方法的接口。


执行指定的class文件目录（classpath）
     当使用java编译后的class文件不在当前目录，我们使用-classpath来指定文件目录C:>java -classpath C:\java\DemoClasses HelloWorld
 

查看java运行的版本
     java -version


字符串比较
     compareTo(String)
     compareToIgnoreCase(String)
     compareTo(object string)
     返回字符串中第一个字母ASCII与括号中第一个字母的差值


查找字符串最后一次出现的位置
     strOrig.lastIndexOf(Stringname)来查找子字符串Stringname在strOrig出现的位置。


删除字符串中的一个字符
    substring（）函数来删除字符串中的一个字符


I/O数据流
文件字节输入流-FileInputStream 
   例：首先创建文件对象   File f=new File("文件的绝对地址");
       然后建立文件字节输入流对象   FileInputStream fs=new FileInputStream(f);
       读取文件代码：
                  int n=0;
                  byte[] a=new byte[1000];
                  while(n=fs.read(a,0,1000)!=-1){
                       String s=new String(a,0,n)
                       System.out.printfln(s);
                   }
       方法read（byte{} a,int off,int length）返回当前实际的字节数，到达文件结尾返回-1

文件字节输出流-FileOutputStream 
   例：首先创建文件对象   File f=new File("需写入数据的文件的绝对地址");
       然后建立文件字节输出流对象   FileOutputStream fos=new FileOutputStream(f);
       读取文件代码：
                  int n=0;
                  byte[] a=new byte[1000];
                  fos.write(a,0,1000)
      
       方法write（byte{} a,int off,int length）从off位置开始写入长度length的字节码到a数组中

标准的关闭流的方式
      1. 首先把流的引用声明在try的外面，如果声明在try里面，其作用域无法抵达finally.
      2. 在finally关闭之前，要先判断该引用是否为空
      3. 关闭的时候，需要再一次进行try catch处理
其他两种方式为try()与try，try（）将流的声明放在try(流的声明)